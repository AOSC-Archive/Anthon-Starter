<!-- = 安同开始程序开发者手册 = -->

== 概述 ==

'''安同开始程序'''（英文名'''Anthon-Starter'''）是一款操作系统安装助手类软件，由安同开源社区发起并维护，提供给安同开源社区各发行版从其他操作系统通过硬盘安装系统的功能的软件。

目前项目正在缓慢发展中。

<!-- 概述 -->

== 程序信息 ==

* 平台：Microsoft(R) Windows(R)
* 编译器：[http://zh.wikipedia.org/wiki/MinGW MinGW]（[http://zh.wikipedia.org/wiki/GCC GCC]）
* 使用的编程语言：[http://zh.wikipedia.org/wiki/C%E8%AF%AD%E8%A8%80 C]
* 协议：[http://zh.wikipedia.org/wiki/GNU%E9%80%9A%E7%94%A8%E5%85%AC%E5%85%B1%E8%AE%B8%E5%8F%AF%E8%AF%81#GPLv3 GNU GPL 3.0]
* 源码：https://github.com/AOSC-Dev/Anthon-Starter

您可以使用 Git 并通过以下命令：

<code>
git clone https://github.com/AOSC-Dev/Anthon-Starter.git
</code>

来下载最新版本的源代码。

<!-- 程序信息 -->

== 版本历史 & 计划 ==

=== 0.1.0 代系 ===

 0.1.0.0：2012/2/9发布；
 0.1.0.3：2012/2/17发布；
 【已停止支持】于：2013/7/1

0.1.0 代系版本首次实现了安同 OS 的硬盘安装功能，使用 Delphi 7 制作界面，但核心仍是批处理；0.1.0.3 中则针对引导器做了一些小修改和错误修复。

=== 0.1.1 代系 ===

 0.1.1.0：2013/6/27发布；
 0.1.1.1：2013/7/6发布；
 0.1.1.2：2013/7/19发布；
 0.1.1.3：2013/8/3发布（稳定版本）；
 【已停止支持】于：2014/2/1

0.1.1 代系去除了 GUI 并实现了 CLI 的界面，全部采用批处理编写并去除了 0.1.0 中可能有版权争议的组件；软件默认修改NT系统引导器来引导 GRUB4DOS 0.4.4 并引导至安同-EHL3安装器；支持简体中文、繁体中文、英语和德语；支持 NT6 权限管理。

=== 0.1.2 代系 ===

 0.1.2.0：2014/7/10发布；
 【已停止支持】于：2014/8/28

0.1.2 代系大幅度精简及优化了程序体，去除德语及繁体中文的支持，增加对 GPT + EFI 组合计算机的支持；增加映像校验、OS2 发行版支持；更新一系列组件。

=== 0.2 代系计划 ===

0.2 使用 C 语言将程序全部重写。前期将只拥有命令行界面，后期将添加简单的图形界面，并且带自动探测系统配置功能。

本版本目前在 [https://github.com/AOSC-Dev/Anthon-Starter Github] 上有源码的每日推送，位于 <code>0.2.0-devel</code> 分支。

=== 0.3 代系计划 ===

0.3 将在整合 0.2 功能的情况下，编写步骤化的、更易于使用的图形用户界面。

=== 0.4 代系计划 ===

0.4.x 将努力实现直接在 Windows 下安装 AOSC 发行版的功能，并整合对系统的配置，相当于安装程序。

'''也许并非 wubi 式。'''

<!-- 版本历史 & 计划 -->

== 程序架构 ==

=== 函数原型一览（funcs.h） ===

{{Box|注意：|本段并未完成。|#ffd700}}

==== 检查参数 ====

 int chkargs ( int argc, char **argv,
               char **p_osimg_tgt,
               img *imginfo, int *instform, int *verbose_mode, int *quiet_mode,
               int *will_pause, int *will_reboot, int *will_verify, int *will_extract );

<code>chkargs</code> 将根据命令行参数中的各个开关定义变量，包括：

* <code>p_osimg_tgt</code> 是一个指向指针的指针，它用于允许 <code>chkargs</code> 修改其中包含的两个字串：

** <code>osimage</code> 是一个指向映像文件路径的字串；
** <code>ostarget</code> 是一个指向映像文件中的 <code>live.squashfs</code> 文件应该被解压的路径的字串；

在其父函数 <code>main</code> 中，<code>p_osimg_tgt[0]</code> 暂时代表了 <code>osimage</code>，<code>p_osimg_tgt[1]</code> 则暂时代表 <code>ostarget</code>。当 <code>main</code> 函数调用 <code>run</code> 函数时，它们又会被传递为 <code>osimage</code> 和 <code>ostarget</code>。

* <code>imginfo</code> 是一个 <code>img</code> 类型结构，它的定义（位于 <code>funcs.h</code>）为：

 typedef struct
 {
     int os;                /* 表示 AOSC OS 代系 */
     char *dist,            /* AOSC OS 派生版本四字代号 */
          *ver,             /* 此系统版本信息 */
          *lang,            /* 此系统的语言 */
          *vmlinuz_chksum,  /* 此映像文件中 vmlinuz 文件的 MD5 校验码值 */
          *initrd_chksum,   /* 此映像文件中 initrd 文件的 MD5 校验码值 */
          *livesq_chksum;   /* 此映像文件中 live.squashfs 文件的 MD5 校验码值 */
 } img;

* <code>instform</code> 用整数来代表将要使用什么方法来部署启动，它的定义（位于defs.h）为：

 # define EDIT_PRESENT 1    /* 修改现有引导器 */
 # define EDIT_MBR 2        /* 修改主引导记录（MBR）*/
 # define EDIT_ESP 3        /* 修改 GUID 分区表的引导分区 */
 # define EDIT_DONOT 5      /* 不做任何修改 */

* <code>verbose_mode</code> 用整数 0 或 1 表示是否输出尽可能'''多'''的信息；
* <code>quiet_mode</code> 用整数 0 或 1 表示是否输出尽可能'''少'''的信息；
* <code>will_pause</code> 用整数 0 或 1 表示是否在操作完成后暂停，不管是成功或者是失败；
* <code>will_reboot</code> 用整数 0 或 1 表示是否在操作完成后自动执行重启；
* <code>will_verify</code> 用整数 0 或 1 表示是否校验文件正确性；
* <code>will_extract</code> 用整数 0 或 1 表示是否解压文件；

==== 运行程序 ====

为了减少 <code>main</code> 函数的长度，使用以下函数：

 int run ( char *osimage, char *ostarget,
           img *imginfo, int instform, int verbose_mode, int quiet_mode,
           int will_pause, int will_reboot, int will_verify, int will_extract );

来包括所有正式执行工作的函数，包括：

* <code>init</code>
* <code>getsysinfo</code>
* <code>backup</code>
* <code>extract</code>
* <code>verify</code>
* <code>deploy</code>

==== 初始化 ====

初始化安同开始程序，包括：

* 检查自身完整性（7z.exe 以及 7z.dll）；
* 检查指向的映像文件正确性（检查 md5sum.ast）。

 int init ( img *imginfo, char *osimage, char *ostarget );

==== 获取系统信息 ====

 int getsysinfo ( int *loader, int ptable, char *systemdrive );

此函数用于获得当前系统信息，包括：

* 系统盘位置，通过 <code>getenv ( "SystemDrive" )</code> 函数来直接从环境变量获取。
* 分区表类型。此处使用了一种比较偏的方法，通过读取磁盘上的 <code>EFI PART</code> 标志来判断是否为 <code>GPT</code>，否则则判断为 <code>MBR</code>。

 if ( ( efi[0] == 0x45 ) && ( efi[1] == 0x46 ) && ( efi[2] == 0x49 ) && ( efi[3] == 0x20 ) &&
      ( efi[4] == 0x50 ) && ( efi[5] == 0x41 ) && ( efi[6] == 0x52 ) && ( efi[7] == 0x54 ) ) /* "EFI PART" */
 {
     *ptable = PTABLE_GPT;
     notify ( INFO, "Partition table: GUID Partition Table (GPT)" );
 }

* 系统引导器类型，通过探测 <code>NTLDR</code> 以及 <code>%systemdrive%\Windows\Boot</code>（BCD）来判断。
* 系统盘剩余容量，通过 WinAPI <code>GetDiskFreeSpaceEx</code> 来判断。这个过程本用于决定之后 <code>live.squashfs</code> 的解压位置，但是目前被 <code>--output=</code> 参数覆盖。
* 处理器架构，通过 WinAPI <code>GetNativeSystemInfo</code> 来获取这个信息。

'''注意：'''MinGW 并未在其头文件中声明这个函数，其库中也没有，但是在非低版本（早于 Windows Vista 的系统中只有 <code>GetSystemInfo</code>）的 Windows 系统中存在此函数，用于“突破” WOW64 的限制。因此程序通过

 PGNSI pGNSI = ( PGNSI ) GetProcAddress ( GetModuleHandle ( TEXT ( "kernel32.dll" ) ), "GetNativeSystemInfo" );

以及一个判断结构来决定应该使用哪一个函数。

* 内存大小，通过 <code>GlobalMemoryStatusEx</code> 获得内存总大小并在必要时给出警告。

==== 备份关键位置 ====

 int backup ( int loader, int ptable );

* 系统引导器
* 分区表（<code>MBR</code> 以及 <code>ESP</code> 中的必要文件）

==== 解压缩映像文件 ====

 int extract ( int will_extract, char *osimage, char *ostarget );

==== 校验文件 ====

 int verify ( int will_verify, char *ostarget );

==== 部署启动 ====

 int deploy ( int loader, int ptable );

==== Startup ====

 int startup ();

==== 其它辅助函数 ====

===== 显示帮助信息 =====

 int help_message ( char *progname );

<!-- 我就是要用元模板怎样来咬我啊 -->
{{Box|提示：|<code>progname</code> 其实是 <code>argv[0]</code>。|#00ffff}}

===== 向终端打印彩色字符 =====

 void clrprintf ( WORD color, char* format, ... );

代码参考了 Heroin 于开源中国网站上 [http://www.oschina.net/code/snippet_48783_329 《C++ 输出彩色的控制台》]一文中的程序，在此致以感谢。

===== 更方便地向终端输出 =====

 void notify ( int TNotice, char *format, ... );

其中，整数 <code>TNotice</code> 表示在终端上输出的消息等级，并据此确定消息开头。TNotice 的定义（位于 defs.h）为：

 # define SUCC 0
 # define INFO 1
 # define WARN 2
 # define FAIL 3

函数调用 <code>clrprintf</code> 等函数向终端输出一串信息。<code>TNotice</code> 中：

* <code>SUCC</code> 决定消息开头为 <font color="green">[S]</font>
* <code>INFO</code> 决定消息开头为 <font color="cyan">[I]</font>
* <code>WARN</code> 决定消息开头为 <font color="yellow">[W]</font>
* <code>FAIL</code> 决定消息开头为 <font color="red">[E]</font>

===== 更方便地挂空指针 =====

 # define take(ptr) if(ptr!=NULL){free(ptr);ptr=NULL;}

===== 快速 MD5 校验 =====

 int md5sum ( char *rtn, char *file );


=== 软件体系 ===

 命令行参数 > main() -- chkargs() ----- run() -- (return) > 退出
                                   |  |   |
                                   |  |   |-> init() -- md5sum()
                                   |  |   |           \-- 遇到错误 --> 退出
                                   |  |   |-> getsysinfo()
              clrprintf()          |  |   |-> backup()
              notify()             |  |   |-> extract() 
              take()               |  |   |-> verify()
                                   |  |   |-> deploy()
                                   |  |   |-> (return)
                                   |  |
                                   |  |-> startup() --> 退出
                                   |
                                   |-> help_message() --> 退出

<!-- 程序架构 -->

== 进入开发 ==

=== 从源码构建 ===

安同开始程序使用 [http://zh.wikipedia.org/wiki/Make#GNU_make GNU Make] 来构建程序，Makefile 置于源码树根目录下，只需要在源码树根目录下执行 <code>make</code> 即可。

在 Windows 环境中，构建安同开始程序需要：

* mingw32 (gcc)
* msys
* git （可选，用于 clone 代码仓库）

为了保证程序的便携性，我们不采用 [http://zh.wikipedia.org/wiki/Cygwin Cygwin] 环境，因为那需要第三方 [http://zh.wikipedia.org/wiki/POSIX POSIX] 兼容库，体积比较庞大。当然，若您使用的是 Cygwin 的 mingw 实现，也没关系。

另外，若需要在 Linux 下通过交叉编译来构建安同开始程序，需要：

* binutils-mingw-w64-i686
* gcc-mingw-w64-i686

{{Box|注意：|安同开始程序使用了 <code>GlobalMemoryStatusEx</code> 函数，这个函数在 Linux 下（貌似）只能使用 mingw64 来编译，Windows 平台则无此问题。|#ffd700}}

现阶段安同开始程序未提供 [http://zh.wikipedia.org/wiki/Autoconf configure] 脚本，因此在执行 make 时需要手动调节这些变量：<code>$(CC)</code>，<code>$(LD)</code> 以及 <code>$(RES)</code>，否则将不能通过编译。也许可以这样：

 make -e CC=i686-w64-mingw32-gcc LD=i686-w64-mingw32-ld RES=i686-w64-mingw32-windres

来通过 mingw64 交叉编译安同开始程序。

=== 反馈 ===

安同开始程序欢迎任何形式的贡献：

==== 反馈代码 ====

安同开始程序的代码托管在 https://github.com/AOSC-Dev/Anthon-Starter 上，任何 [https://github.com/orgs/AOSC-Dev/people AOSC-Dev 的成员]均有推送源码的权限。若没有，可以：

# Fork 代码仓库；
# 对代码进行修改；
# 向 AOSC-Dev/Anthon-Starter 提交 Pull Request。
#* 给我们发送 patch 文件也可以。

==== 报告缺陷 ====

安同开始程序接受来自两个地方的缺陷报告：

* [https://github.com/AOSC-Dev/Anthon-Starter/issues Github Issue]
* [https://bugs.anthonos.org AOSC 缺陷报告平台]

在“AOSC 缺陷报告平台”上报告问题时，请注意选择 '''Anthon-Starter''' 类别。开发小组将在 2 周内给予答复并采取必要的措施。

== 使用组件一览 ==

目前无法统计安同开始程序到底会使用哪些组件。

<!-- 使用组件一览 -->

== 小组人员 ==

* 黎民雍 <lmy441900@gmail.com>
* 刘子兴 <liushuyu011@gmail.com>
* 杜旻晖 <duminghui@126.com>
* 罗超 <campermsn@gmail.com>
* 许皓鸣 <18929292333@163.com>

联系我们，您可以：

* 加入安同开源社区 IRC 频道 <code>#anthon</code>
* 加入安同社区交流群（QQ群）<code>125016052</code>

欢迎您的参与！

<!-- 小组人员 -->
